let Koa,Router,bodyParser,mongoose,api,dotenv,jwtMiddleware;_a49‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_a49‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_a49‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_a49‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_a49‍.w("./api",[["default",["api"],function(v){api=v}]]);_a49‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_a49‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);require('dotenv').config();








// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만둘기
dotenv.config();

const { PORT, MONGO_URI } = process.env;

async function connectDB() {
  try {
    await mongoose.connect(MONGO_URI, {
      useNewUrlParser: true,
      useFindAndModify: false,
      useUnifiedTopology: true,
    });
    console.log('Connected to MongoDB');
  } catch (e) {
    _a49‍.g.console.error(e);
  }
}
connectDB();
const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes()); // api 라우트 적용

//라우트 적용 전에 bodyParser 적용
app.use(bodyParser());
app.use(jwtMiddleware);

//app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const port = PORT || 4000;
app.listen(port, () => {
  console.log(`Listening to port ${port}`);
});
